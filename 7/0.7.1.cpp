#include <iostream>
#include <algorithm>

class Complex // Класс для хранения комплексных чисел
{
  private:
  int *x; // Массив вещественной части числа
  int *i; // Массив мнимой части числа
  int size; // Размер массива

  public:
  class C // Класс комлексное число
  { 
    public: //  public чтобы можно было иметь доступ (изменять/читать) к переменным x и i
      int x; // Вещественная часть
      int i; // Мнимая
  };
  void set(int in, C xi) // Присваиваем числу под индексом in значение xi
  { // "C xi" это комплексное число, xi.x - вещественная часть, xi.i - мнимая
    in = in < size ? in : size - 1; // Если больше размера, то меняем посл. элемент
    x[in] = xi.x; // Записываем в массив вещественных чисел
    i[in] = xi.i; // Записываем в массив мнимых чисел
  }
  C get(int in) // Получение числа под индексом in
  {
    in = in < size ? in : size - 1;// Если больше размера, то возвращаем посл. элемент
    return {x[in], i[in]}; 
    // Возвращаем числа как объект Комплексное число с полями x = x[in] и i = i[in]
  }
  void del(int in) // Удаление элемента
  {
    // Если пытаемся удалить элемент больше размера, то ничего не делаем
    if (in < size) 
    {
      while (++in < size) // Начиная  с элемента под индексом in + 1 до индекса size - 1
      { // [1, 2, 3, 4, 5] del(2)
        //  [1, 2, 4, 5] все сдвинули и уменьшили размер
        x[in - 1] = x[in]; // Сдвигаем все влево
        i[in - 1] = i[in]; // Тоже сдвигаем
      }
      size--; // Уменьшаем размер
    }
  }
  void delAll()
  { // Удаляем весь массив
    size = 1; // делаем размер 1
    x[0] = 0; // первый элемент равен 0
    i[0] = 0; // первый равен 0
  }
  Complex(int size) : size(size) // Конструктор, задаем размер равный size
  {
    x = new int[size]; //  Выделяем size памяти под вещественную часть числа
    i = new int[size]; // Выделяем size памяти по мнимую часть числа
  };
  ~Complex()
  { // Диструктор, удаляем выделенную память
    delete[] x;
    delete[] i;
  }
};

int main(int argc, char** argv){ 
  Complex test(5); // Создаем массив длиной 5
  test.set(1, {1, 5}); // 2ой элемент (под индексом 1) равняется {1, 5}
  test.set(3, {0, 2}); // 4ый элемент (под индексом 3) равняется {0, 2}
  test.set(4, {3, 0}); // 5ый элемент (под индексом 4) равняется {3, 0}
  printf("test[1] == %i, %i\n", test.get(1).x, test.get(1).i); // Получаем достуступ ко второму элементу, и через точку (.x и .i)
  printf("test[3] == %i, %i\n", test.get(3).x, test.get(3).i); // Получаем достуступ ко четвертому элементу, и через точку (.x и .i)
  printf("test[4] == %i, %i\n", test.get(4).x, test.get(4).i); // Получаем достуступ ко пятому элементу, и через точку (.x и .i)
  test.del(3); // Удаляем 4ый элемент
  printf("test[3] == %i, %i\n", test.get(3).x, test.get(3).i); // Пытаемся получить доступ к 4 элементу
  test.delAll(); // Чистим массив
  printf("test[1] == %i, %i\n", test.get(1).x, test.get(1).i);
  printf("test[3] == %i, %i\n", test.get(3).x, test.get(3).i);
  printf("test[4] == %i, %i\n", test.get(4).x, test.get(4).i);
  return 0;
}